pipeline {
    agent any
    stages {
        stage('Build info') {
            steps {
              sh 'env'
            }
        }
        stage('Checkout sources') {
            steps {
                checkout changelog: false, poll: false,
                    scm: [$class: 'GitSCM', branches: [[name: "${env.GIT_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                    userRemoteConfigs: [[url: "${env.GIT_URL}"]]]
            }
        }
        stage('Set maintenance mode on') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(/*"${env.PROJECT_NAME}"*/) {
                            def template = readFile 'nextcloud-maintenance.yaml'
                            def config = openshift.process(template,
                              '-p', "NEXTCLOUD_IMAGE_TAG=${env.OLD_NEXTCLOUD_IMAGE_TAG}",
                              '-p', "ON_OFF=on")
                            def jobs = openshift.create(config)
                            timeout(5) {
                                jobs.untilEach(1) {
                                    return (it.object().status.phase == "Completed")
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Run upgrade with new image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(/*"${env.PROJECT_NAME}"*/) {
                            def template = readFile 'upgrade/nextcloud-upgrade.yaml'
                            def config = openshift.process(template,
                              '-p', "NEXTCLOUD_IMAGE_TAG=${env.NEW_NEXTCLOUD_IMAGE_TAG}")
                            def objects = openshift.apply(config)
                            timeout(20) {
                                objects.related('job').untilEach(1) {
                                    return (it.object().status.phase == "Completed")
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Apply new image to deployment configuration') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(/*"${env.PROJECT_NAME}"*/) {
                            def template = readFile 'nextcloud.yaml'
                            def config = openshift.process(template,
                              '-p', "NEXTCLOUD_HOST=${env.NEXTCLOUD_HOST}",
                              '-p', "NEXTCLOUD_IMAGE_TAG=${env.NEW_NEXTCLOUD_IMAGE_TAG}")
                            openshift.apply(config)

                            def templateName = 'nextcloud'
                            /*def rm = openshift.selector("dc", templateName)
                              .rollout().latest()*/
                            timeout(5) {
                                openshift.selector("dc", templateName)
                                  .related('pods').untilEach(1) {
                                    return (it.object().status.phase == "Running")
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Set maintenance mode off') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(/*"${env.PROJECT_NAME}"*/) {
                            def template = readFile 'nextcloud-maintenance.yaml'
                            def config = openshift.process(template,
                              '-p', "NEXTCLOUD_IMAGE_TAG=${env.NEW_NEXTCLOUD_IMAGE_TAG}",
                              '-p', "ON_OFF=off")
                            def jobs = openshift.create(config)
                            timeout(10) {
                                jobs.untilEach(1) {
                                    return (it.object().status.phase == "Completed")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
